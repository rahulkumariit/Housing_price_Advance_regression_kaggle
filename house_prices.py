# -*- coding: utf-8 -*-
"""House_prices.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18hnDD203wO9WD3yzFVQOhHtTQ2PidWuf
"""

# Importing required library
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Loading the training data, test data and sample submission file
train_data = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')
Submission1 = pd.read_csv('sample_submission.csv')

# Analysing the training data
train_data.head()

# Missing values in training data
train_data.isnull().sum()

# For some feature there are no missing values actually, NA for those features is a lable for not available
# To deal with this we will encode those NA values as nothing1, nothing2, nothing3 and so on....

train_data['Alley'].fillna('Nothing1', inplace = True)
train_data['BsmtQual'].fillna('Nothing2', inplace = True)
train_data['BsmtCond'].fillna('Nothing3', inplace = True)
train_data['BsmtExposure'].fillna('Nothing4', inplace = True)
train_data['BsmtFinType1'].fillna('Nothing5', inplace = True)
train_data['BsmtFinType2'].fillna('Nothing6', inplace = True)
train_data['FireplaceQu'].fillna('Nothing7', inplace = True)
train_data['GarageType'].fillna('Nothing8', inplace = True)
train_data['GarageFinish'].fillna('Nothing9', inplace = True)
train_data['GarageQual'].fillna('Nothing10', inplace = True)
train_data['GarageCond'].fillna('Nothing11', inplace = True)
train_data['PoolQC'].fillna('Nothing12', inplace = True)
train_data['Fence'].fillna('Nothing13', inplace = True)
train_data['MiscFeature'].fillna('Nothing14', inplace = True)

# Now to deal with the missing values in GarageYrBlt, MasVnrArea and LotFrontage we will use median
train_data['LotFrontage'].fillna(train_data['LotFrontage'].median(), inplace = True)
train_data['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median(), inplace = True)
train_data['MasVnrArea'].fillna(train_data['MasVnrArea'].median(), inplace = True)

# And lastly to deal with the missing values in Electrical and MasVnrType we will fill the missing value with most frequent values
train_data['Electrical'].fillna(train_data['Electrical'].value_counts(). idxmax(), inplace = True)
train_data['MasVnrType'].fillna(train_data['MasVnrType'].value_counts(). idxmax(), inplace = True)

# Now total missing values are
train_data.isnull().sum().sum()    # 0 missing values in training data

# Extracting the variable to be predicted from training data

train_y = train_data['SalePrice']

# Analyzing the distribution of feature to be predicted
plt.hist(train_y, color='blue')
plt.show()       # As we can see it is not a normal distribution so we will convert it into normal distribution by lograthimic transformation

# We will do so because we will use regression here

# logarithmic transformation and plotting
train_y = np.log(train_y)

plt.hist(train_y, color = 'blue')
plt.show()            # Now its a normal distribution

# Feature engineering to encode different categorical feature into number by using one hot vector

dummies1 = pd.get_dummies(train_data['MSSubClass'], prefix = 'MSSubClass' )
dummies2 = pd.get_dummies(train_data['MSZoning'], prefix = 'MSZoning' )
dummies3 = pd.get_dummies(train_data['Street'], prefix = 'Street')
dummies4 = pd.get_dummies(train_data['Alley'], prefix = 'Alley')
dummies5 = pd.get_dummies(train_data['LotShape'], prefix = 'LotShape')
dummies6 = pd.get_dummies(train_data['LandContour'], prefix = 'LandContour')
dummies7 = pd.get_dummies(train_data['Utilities'], prefix = 'Utilities')
dummies8 = pd.get_dummies(train_data['LotConfig'], prefix = 'LotConfig')
dummies9 = pd.get_dummies(train_data['LandSlope'], prefix = 'LandSlope')
dummies10 = pd.get_dummies(train_data['Neighborhood'], prefix = 'Neighborhood')
dummies11 = pd.get_dummies(train_data['Condition1'], prefix = 'Condition1')
dummies12 = pd.get_dummies(train_data['Condition2'], prefix = 'Condition2')
dummies13 = pd.get_dummies(train_data['BldgType'], prefix = 'BldgType')
dummies14 = pd.get_dummies(train_data['HouseStyle'], prefix = 'HouseStyle')
dummies15 = pd.get_dummies(train_data['OverallQual'], prefix = 'OverallQual')
dummies16 = pd.get_dummies(train_data['OverallCond'], prefix = 'OverallCond')
dummies17 = pd.get_dummies(train_data['RoofStyle'], prefix = 'RoofStyle')
dummies18 = pd.get_dummies(train_data['RoofMatl'], prefix = 'RoofMatl')
dummies19 = pd.get_dummies(train_data['Exterior1st'], prefix = 'Exterior1st')
dummies20 = pd.get_dummies(train_data['Exterior2nd'], prefix = 'Exterior2nd')
dummies21 = pd.get_dummies(train_data['MasVnrType'], prefix = 'MasVnrType')
dummies22 = pd.get_dummies(train_data['ExterQual'], prefix = 'ExterQual')
dummies23 = pd.get_dummies(train_data['ExterCond'], prefix = 'ExterCond')
dummies24 = pd.get_dummies(train_data['Foundation'], prefix = 'Foundation')
dummies25 = pd.get_dummies(train_data['BsmtQual'], prefix = 'BsmtQual')
dummies26 = pd.get_dummies(train_data['BsmtCond'], prefix = 'BsmtCond')
dummies28 = pd.get_dummies(train_data['BsmtExposure'], prefix = 'BsmtExposure')
dummies29 = pd.get_dummies(train_data['BsmtFinType1'], prefix = 'BsmtFinType1')
dummies30 = pd.get_dummies(train_data['BsmtFinType2'], prefix = 'BsmtFinType2')
dummies31 = pd.get_dummies(train_data['Heating'], prefix = 'Heating')
dummies32 = pd.get_dummies(train_data['HeatingQC'], prefix = 'HeatingQC')
dummies33 = pd.get_dummies(train_data['CentralAir'], prefix = 'CentralAir')
dummies34 = pd.get_dummies(train_data['Electrical'], prefix = 'Electrical')
dummies35 = pd.get_dummies(train_data['KitchenQual'], prefix = 'KitchenQual')
dummies36 = pd.get_dummies(train_data['Functional'], prefix = 'Functional')
dummies37 = pd.get_dummies(train_data['FireplaceQu'], prefix = 'FireplaceQu')
dummies38 = pd.get_dummies(train_data['GarageType'], prefix = 'GarageType')
dummies39 = pd.get_dummies(train_data['GarageFinish'], prefix = 'GarageFinish')
dummies40 = pd.get_dummies(train_data['GarageQual'], prefix = 'GarageQual')
dummies41 = pd.get_dummies(train_data['GarageCond'], prefix = 'GarageCond')
dummies42 = pd.get_dummies(train_data['PavedDrive'], prefix = 'PavedDrive')
dummies43 = pd.get_dummies(train_data['PoolQC'], prefix = 'PoolQC')
dummies44 = pd.get_dummies(train_data['Fence'], prefix = 'Fence')
dummies45 = pd.get_dummies(train_data['MiscFeature'], prefix = 'MiscFeature')
dummies46 = pd.get_dummies(train_data['SaleType'], prefix = 'SaleType')
dummies47 = pd.get_dummies(train_data['SaleCondition'], prefix = 'SaleCondition')

train_x = pd.concat([train_data, dummies1, dummies2, dummies3, dummies4, dummies5, dummies6, dummies7, dummies8, dummies9, dummies10, dummies11, dummies12, dummies13, dummies14, dummies15, dummies16, dummies17, dummies18, dummies19, dummies20, dummies21, dummies22, dummies23, dummies24, dummies25, dummies26, dummies28, dummies29, dummies30, dummies31, dummies32, dummies33, dummies34, dummies35, dummies36, dummies37, dummies38, dummies39, dummies40, dummies41, dummies42, dummies43, dummies44, dummies45, dummies46, dummies47], axis = 1)

train_x = train_x.drop(columns = ['MSSubClass','MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle', 'OverallQual', 'OverallCond', 'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition','SalePrice','Id','Utilities_NoSeWa','Condition2_RRAe','Condition2_RRAn', 'Condition2_RRNn','Exterior2nd_Other','RoofMatl_ClyTile', 'RoofMatl_Membran', 'RoofMatl_Metal', 'RoofMatl_Roll','Exterior1st_ImStucc','Exterior1st_Stone','Electrical_Mix','Heating_Floor','Heating_OthW','GarageQual_Ex','PoolQC_Fa' ,'MiscFeature_TenC','HouseStyle_2.5Fin'])

# Same as we have done in case of training data, we will do in case of test data
# Analyzing test data
test.head()

# Missing value in test data
test.isnull().sum()

# For some feature there are no missing values actually, NA for those features is a lable for not available
# To deal with this we will encode those NA values as nothing1, nothing2, nothing3 and so on....

test['Alley'].fillna('Nothing1', inplace = True)
test['BsmtQual'].fillna('Nothing2', inplace = True)
test['BsmtCond'].fillna('Nothing3', inplace = True)
test['BsmtExposure'].fillna('Nothing4', inplace = True)
test['BsmtFinType1'].fillna('Nothing5', inplace = True)
test['BsmtFinType2'].fillna('Nothing6', inplace = True)
test['FireplaceQu'].fillna('Nothing7', inplace = True)
test['GarageType'].fillna('Nothing8', inplace = True)
test['GarageFinish'].fillna('Nothing9', inplace = True)
test['GarageQual'].fillna('Nothing10', inplace = True)
test['GarageCond'].fillna('Nothing11', inplace = True)
test['PoolQC'].fillna('Nothing12', inplace = True)
test['Fence'].fillna('Nothing13', inplace = True)
test['MiscFeature'].fillna('Nothing14', inplace = True)

# Now to deal with the missing values for integer or float based features we will use median
test['LotFrontage'].fillna(train_data['LotFrontage'].median(), inplace = True)
test['GarageCars'].fillna(train_data['GarageCars'].median(), inplace = True)
test['GarageArea'].fillna(train_data['GarageArea'].median(), inplace = True)
test['MasVnrArea'].fillna(train_data['MasVnrArea'].median(), inplace = True)
test['BsmtFinSF1'].fillna(train_data['BsmtFinSF1'].median(), inplace = True)
test['BsmtFinSF2'].fillna(train_data['BsmtFinSF2'].median(), inplace = True)
test['BsmtUnfSF'].fillna(train_data['BsmtUnfSF'].median(), inplace = True)
test['TotalBsmtSF'].fillna(train_data['TotalBsmtSF'].median(), inplace = True)
test['BsmtFullBath'].fillna(train_data['BsmtFullBath'].median(), inplace = True)
test['BsmtHalfBath'].fillna(train_data['BsmtHalfBath'].median(), inplace = True)
test['GarageYrBlt'].fillna(train_data['GarageYrBlt'].median(), inplace = True)

# As we can see it has more missing value for some more categorical features so we will replace those missing value with most frequent values
test['MSZoning'].fillna(train_data['MSZoning'].value_counts(). idxmax(), inplace = True)
test['SaleType'].fillna(train_data['SaleType'].value_counts(). idxmax(), inplace = True)
test['Functional'].fillna(train_data['Functional'].value_counts(). idxmax(), inplace = True)
test['KitchenQual'].fillna(train_data['KitchenQual'].value_counts(). idxmax(), inplace = True)
test['Utilities'].fillna(test['Utilities'].value_counts(). idxmax(), inplace = True)
test['Exterior1st'].fillna(test['Exterior1st'].value_counts(). idxmax(), inplace = True)
test['Exterior2nd'].fillna(test['Exterior2nd'].value_counts(). idxmax(), inplace = True)
test['MasVnrType'].fillna(train_data['MasVnrType'].value_counts(). idxmax(), inplace = True)

# Now total missing values are
test.isnull().sum().sum()  # No missing values

# Feature engineering to encode different categorical feature into number by using one hot vector
dummies1 = pd.get_dummies(test['MSSubClass'], prefix = 'MSSubClass' )
dummies2 = pd.get_dummies(test['MSZoning'], prefix = 'MSZoning' )
dummies3 = pd.get_dummies(test['Street'], prefix = 'Street')
dummies4 = pd.get_dummies(test['Alley'], prefix = 'Alley')
dummies5 = pd.get_dummies(test['LotShape'], prefix = 'LotShape')
dummies6 = pd.get_dummies(test['LandContour'], prefix = 'LandContour')
dummies7 = pd.get_dummies(test['Utilities'], prefix = 'Utilities')
dummies8 = pd.get_dummies(test['LotConfig'], prefix = 'LotConfig')
dummies9 = pd.get_dummies(test['LandSlope'], prefix = 'LandSlope')
dummies10 = pd.get_dummies(test['Neighborhood'], prefix = 'Neighborhood')
dummies11 = pd.get_dummies(test['Condition1'], prefix = 'Condition1')
dummies12 = pd.get_dummies(test['Condition2'], prefix = 'Condition2')
dummies13 = pd.get_dummies(test['BldgType'], prefix = 'BldgType')
dummies14 = pd.get_dummies(test['HouseStyle'], prefix = 'HouseStyle')
dummies15 = pd.get_dummies(test['OverallQual'], prefix = 'OverallQual')
dummies16 = pd.get_dummies(test['OverallCond'], prefix = 'OverallCond')
dummies17 = pd.get_dummies(test['RoofStyle'], prefix = 'RoofStyle')
dummies18 = pd.get_dummies(test['RoofMatl'], prefix = 'RoofMatl')
dummies19 = pd.get_dummies(test['Exterior1st'], prefix = 'Exterior1st')
dummies20 = pd.get_dummies(test['Exterior2nd'], prefix = 'Exterior2nd')
dummies21 = pd.get_dummies(test['MasVnrType'], prefix = 'MasVnrType')
dummies22 = pd.get_dummies(test['ExterQual'], prefix = 'ExterQual')
dummies23 = pd.get_dummies(test['ExterCond'], prefix = 'ExterCond')
dummies24 = pd.get_dummies(test['Foundation'], prefix = 'Foundation')
dummies25 = pd.get_dummies(test['BsmtQual'], prefix = 'BsmtQual')
dummies26 = pd.get_dummies(test['BsmtCond'], prefix = 'BsmtCond')
dummies28 = pd.get_dummies(test['BsmtExposure'], prefix = 'BsmtExposure')
dummies29 = pd.get_dummies(test['BsmtFinType1'], prefix = 'BsmtFinType1')
dummies30 = pd.get_dummies(test['BsmtFinType2'], prefix = 'BsmtFinType2')
dummies31 = pd.get_dummies(test['Heating'], prefix = 'Heating')
dummies32 = pd.get_dummies(test['HeatingQC'], prefix = 'HeatingQC')
dummies33 = pd.get_dummies(test['CentralAir'], prefix = 'CentralAir')
dummies34 = pd.get_dummies(test['Electrical'], prefix = 'Electrical')
dummies35 = pd.get_dummies(test['KitchenQual'], prefix = 'KitchenQual')
dummies36 = pd.get_dummies(test['Functional'], prefix = 'Functional')
dummies37 = pd.get_dummies(test['FireplaceQu'], prefix = 'FireplaceQu')
dummies38 = pd.get_dummies(test['GarageType'], prefix = 'GarageType')
dummies39 = pd.get_dummies(test['GarageFinish'], prefix = 'GarageFinish')
dummies40 = pd.get_dummies(test['GarageQual'], prefix = 'GarageQual')
dummies41 = pd.get_dummies(test['GarageCond'], prefix = 'GarageCond')
dummies42 = pd.get_dummies(test['PavedDrive'], prefix = 'PavedDrive')
dummies43 = pd.get_dummies(test['PoolQC'], prefix = 'PoolQC')
dummies44 = pd.get_dummies(test['Fence'], prefix = 'Fence')
dummies45 = pd.get_dummies(test['MiscFeature'], prefix = 'MiscFeature')
dummies46 = pd.get_dummies(test['SaleType'], prefix = 'SaleType')
dummies47 = pd.get_dummies(test['SaleCondition'], prefix = 'SaleCondition')

test = pd.concat([test, dummies1, dummies2, dummies3, dummies4, dummies5, dummies6, dummies7, dummies8, dummies9, dummies10, dummies11, dummies12, dummies13, dummies14, dummies15, dummies16, dummies17, dummies18, dummies19, dummies20, dummies21, dummies22, dummies23, dummies24, dummies25, dummies26, dummies28, dummies29, dummies30, dummies31, dummies32, dummies33, dummies34, dummies35, dummies36, dummies37, dummies38, dummies39, dummies40, dummies41, dummies42, dummies43, dummies44, dummies45, dummies46, dummies47], axis = 1)

test = test.drop(columns = ['Id','MSSubClass_150', 'MSSubClass','MSZoning','Street','Alley','LotShape','LandContour','Utilities','LotConfig','LandSlope','Neighborhood','Condition1','Condition2','BldgType','HouseStyle', 'OverallQual', 'OverallCond', 'RoofStyle','RoofMatl','Exterior1st','Exterior2nd','MasVnrType','ExterQual','ExterCond','Foundation','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2','Heating','HeatingQC','CentralAir','Electrical','KitchenQual','Functional','FireplaceQu','GarageType','GarageFinish','GarageQual','GarageCond','PavedDrive','PoolQC','Fence','MiscFeature','SaleType','SaleCondition'])

# Implementation of RandomForestRegression to build the model
# Importing required libraries
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_log_error

#Training the model and RMSLE calculaton
model = RandomForestRegressor()
model.fit(train_x, train_y)
predict = model.predict(train_x)
acc = mean_squared_log_error(train_y, predict)**(0.5)
print(acc)

# Prediction on test data
submission2 = model.predict(test)
submission2 = np.exp(submission2)

# Making the final csv file and showing it
submission = pd.concat([Submission1,pd.DataFrame(submission2)], axis = 1)
submission

# Renamming the result column as SalePrice and saving it
submission = submission.rename(columns = {0 : 'SalePrice'})
submission.to_csv('Submission.csv')